name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read .python-version
        id: python-version
        run: |
          if [ -f .python-version ]; then
            echo "version=$(cat .python-version)" >> $GITHUB_OUTPUT
          else
            echo "version=3.12" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.python-version.outputs.version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # (Optional) If you build artifacts for sharing between jobs, add them here. Example:
      # - name: Build wheel
      #   run: python setup.py bdist_wheel
      # - name: Upload build artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dist
      #     path: dist/

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read .python-version
        id: python-version
        run: |
          if [ -f .python-version ]; then
            echo "version=$(cat .python-version)" >> $GITHUB_OUTPUT
          else
            echo "version=3.11" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.python-version.outputs.version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # (Optional) Download build artifact if needed
      # - name: Download build artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: dist

      - name: Create .env from secrets if needed
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          # Add other secrets as needed:
          # echo "MY_SECRET=${{ secrets.MY_SECRET }}" >> .env

      - name: Run tests
        env:
          DATABASE_URL: "sqlite:///:memory:"
        run: pytest

  deploy:
    name: Deploy to Render
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Render Deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}